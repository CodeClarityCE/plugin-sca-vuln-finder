package matcher

import (
	"strings"

	vulnerabilityFinderTypes "github.com/CodeClarityCE/plugin-sca-vuln-finder/src/types"
	gocvss30 "github.com/pandatix/go-cvss/30"
	gocvss31 "github.com/pandatix/go-cvss/31"
)

func getSeverity(vuln vulnerabilityFinderTypes.Pairs) vulnerabilityFinderTypes.VulnerabilityMatchSeverity {

	if len(vuln.NVD.Vulnerability.Metrics.CvssMetricV31) > 0 {
		cvssData := vuln.NVD.Vulnerability.Metrics.CvssMetricV31[0]
		cvssScore := cvssData.CvssData.BaseScore
		return vulnerabilityFinderTypes.VulnerabilityMatchSeverity{
			SeverityClass:                  getSeverityClassV3(cvssScore),
			Severity:                       cvssScore,
			SeverityType:                   vulnerabilityFinderTypes.CVSS_V31,
			Vector:                         cvssData.CvssData.VectorString,
			Impact:                         cvssData.ImpactScore,
			Exploitability:                 cvssData.ExploitabilityScore,
			ConfidentialityImpact:          cvssData.CvssData.ConfidentialityImpact,
			IntegrityImpact:                cvssData.CvssData.IntegrityImpact,
			AvailabilityImpact:             cvssData.CvssData.AvailabilityImpact,
			ConfidentialityImpactNumerical: getNumericalCIAScore(cvssData.CvssData.ConfidentialityImpact),
			IntegrityImpactNumerical:       getNumericalCIAScore(cvssData.CvssData.IntegrityImpact),
			AvailabilityImpactNumerical:    getNumericalCIAScore(cvssData.CvssData.AvailabilityImpact),
		}
	} else if len(vuln.NVD.Vulnerability.Metrics.CvssMetricV30) > 0 {
		cvssData := vuln.NVD.Vulnerability.Metrics.CvssMetricV30[0]
		cvssScore := cvssData.CvssData.BaseScore
		return vulnerabilityFinderTypes.VulnerabilityMatchSeverity{
			SeverityClass:                  getSeverityClassV3(cvssScore),
			Severity:                       cvssScore,
			SeverityType:                   vulnerabilityFinderTypes.CVSS_V3,
			Vector:                         cvssData.CvssData.VectorString,
			Impact:                         cvssData.ImpactScore,
			Exploitability:                 cvssData.ExploitabilityScore,
			ConfidentialityImpact:          cvssData.CvssData.ConfidentialityImpact,
			IntegrityImpact:                cvssData.CvssData.IntegrityImpact,
			AvailabilityImpact:             cvssData.CvssData.AvailabilityImpact,
			ConfidentialityImpactNumerical: getNumericalCIAScore(cvssData.CvssData.ConfidentialityImpact),
			IntegrityImpactNumerical:       getNumericalCIAScore(cvssData.CvssData.IntegrityImpact),
			AvailabilityImpactNumerical:    getNumericalCIAScore(cvssData.CvssData.AvailabilityImpact),
		}
	} else if len(vuln.NVD.Vulnerability.Metrics.CvssMetricV2) > 0 {
		cvssData := vuln.NVD.Vulnerability.Metrics.CvssMetricV2[0]
		cvssScore := cvssData.CvssData.BaseScore
		return vulnerabilityFinderTypes.VulnerabilityMatchSeverity{
			SeverityClass:                  getSeverityClassV2(cvssScore),
			Severity:                       cvssScore,
			SeverityType:                   vulnerabilityFinderTypes.CVSS_V2,
			Vector:                         cvssData.CvssData.VectorString,
			Impact:                         cvssData.ImpactScore,
			Exploitability:                 cvssData.ExploitabilityScore,
			ConfidentialityImpact:          cvssData.CvssData.ConfidentialityImpact,
			IntegrityImpact:                cvssData.CvssData.IntegrityImpact,
			AvailabilityImpact:             cvssData.CvssData.AvailabilityImpact,
			ConfidentialityImpactNumerical: getNumericalCIAScore(cvssData.CvssData.ConfidentialityImpact),
			IntegrityImpactNumerical:       getNumericalCIAScore(cvssData.CvssData.IntegrityImpact),
			AvailabilityImpactNumerical:    getNumericalCIAScore(cvssData.CvssData.AvailabilityImpact),
		}
	}

	if len(vuln.OSV.Vulnerability.Severity) > 0 {
		for _, severity := range vuln.OSV.Vulnerability.Severity {
			if severity.Type == "CVSS_V3" {
				if strings.HasPrefix(severity.Score, "CVSS:3.1") {
					cvss31, err := gocvss31.ParseVector(severity.Score)
					if err == nil {
						cvssScore := cvss31.BaseScore()
						severityData := vulnerabilityFinderTypes.VulnerabilityMatchSeverity{
							SeverityClass:                  getSeverityClassV3(cvssScore),
							Severity:                       cvssScore,
							SeverityType:                   vulnerabilityFinderTypes.CVSS_V31,
							Vector:                         severity.Score,
							Impact:                         cvss31.Impact(),
							Exploitability:                 cvss31.Exploitability(),
							ConfidentialityImpact:          "",
							IntegrityImpact:                "",
							AvailabilityImpact:             "",
							ConfidentialityImpactNumerical: 0.0,
							IntegrityImpactNumerical:       0.0,
							AvailabilityImpactNumerical:    0.0,
						}
						confidentialityImpact, err := cvss31.Get("C")
						if err == nil {
							if confidentialityImpact == "H" {
								severityData.ConfidentialityImpact = "HIGH"
							}
							if confidentialityImpact == "L" {
								severityData.ConfidentialityImpact = "LOW"
							}
							if confidentialityImpact == "N" {
								severityData.ConfidentialityImpact = "NONE"
							}
						}
						integrityImpact, err := cvss31.Get("I")
						if err == nil {
							if integrityImpact == "H" {
								severityData.IntegrityImpact = "HIGH"
							}
							if integrityImpact == "L" {
								severityData.IntegrityImpact = "LOW"
							}
							if integrityImpact == "N" {
								severityData.IntegrityImpact = "NONE"
							}
						}
						availabilityImpact, err := cvss31.Get("A")
						if err == nil {
							if availabilityImpact == "H" {
								severityData.AvailabilityImpact = "HIGH"
							}
							if availabilityImpact == "L" {
								severityData.AvailabilityImpact = "LOW"
							}
							if availabilityImpact == "N" {
								severityData.AvailabilityImpact = "NONE"
							}
						}
						severityData.ConfidentialityImpactNumerical = getNumericalCIAScore(severityData.ConfidentialityImpact)
						severityData.AvailabilityImpactNumerical = getNumericalCIAScore(severityData.AvailabilityImpact)
						severityData.IntegrityImpactNumerical = getNumericalCIAScore(severityData.IntegrityImpact)
						return severityData
					}
				} else if strings.HasPrefix(severity.Score, "CVSS:3.0") {
					cvss30, err := gocvss30.ParseVector(severity.Score)
					if err == nil {
						cvssScore := cvss30.BaseScore()
						severityData := vulnerabilityFinderTypes.VulnerabilityMatchSeverity{
							SeverityClass:         getSeverityClassV3(cvssScore),
							Severity:              cvssScore,
							SeverityType:          vulnerabilityFinderTypes.CVSS_V3,
							Vector:                severity.Score,
							Impact:                cvss30.Impact(),
							Exploitability:        cvss30.Exploitability(),
							ConfidentialityImpact: "",
							IntegrityImpact:       "",
							AvailabilityImpact:    "",
						}
						confidentialityImpact, err := cvss30.Get("C")
						if err == nil {
							if confidentialityImpact == "H" {
								severityData.ConfidentialityImpact = "HIGH"
							}
							if confidentialityImpact == "L" {
								severityData.ConfidentialityImpact = "LOW"
							}
							if confidentialityImpact == "N" {
								severityData.ConfidentialityImpact = "NONE"
							}
						}
						integrityImpact, err := cvss30.Get("I")
						if err == nil {
							if integrityImpact == "H" {
								severityData.IntegrityImpact = "HIGH"
							}
							if integrityImpact == "L" {
								severityData.IntegrityImpact = "LOW"
							}
							if integrityImpact == "N" {
								severityData.IntegrityImpact = "NONE"
							}
						}
						availabilityImpact, err := cvss30.Get("A")
						if err == nil {
							if availabilityImpact == "H" {
								severityData.AvailabilityImpact = "HIGH"
							}
							if availabilityImpact == "L" {
								severityData.AvailabilityImpact = "LOW"
							}
							if availabilityImpact == "N" {
								severityData.AvailabilityImpact = "NONE"
							}
						}
						severityData.ConfidentialityImpactNumerical = getNumericalCIAScore(severityData.ConfidentialityImpact)
						severityData.AvailabilityImpactNumerical = getNumericalCIAScore(severityData.AvailabilityImpact)
						severityData.IntegrityImpactNumerical = getNumericalCIAScore(severityData.IntegrityImpact)
						return severityData
					}
				}
			}

		}
	}

	return vulnerabilityFinderTypes.VulnerabilityMatchSeverity{
		Severity:                       0.0,
		SeverityType:                   vulnerabilityFinderTypes.CVSS_V31,
		Vector:                         "",
		Impact:                         0.0,
		Exploitability:                 0.0,
		ConfidentialityImpact:          "",
		IntegrityImpact:                "",
		AvailabilityImpact:             "",
		ConfidentialityImpactNumerical: 0.0,
		IntegrityImpactNumerical:       0.0,
		AvailabilityImpactNumerical:    0.0,
	}

}

// type CVSS_CLASS string

// const (
// 	CRITICAL CVSS_CLASS = "CRITICAL"
// 	HIGH     CVSS_CLASS = "HIGH"
// 	MEDIUM   CVSS_CLASS = "MEDIUM"
// 	LOW      CVSS_CLASS = "LOW"
// 	NONE     CVSS_CLASS = "NONE"
// )

func getSeverityClassV3(cvssScore float64) vulnerabilityFinderTypes.CVSS_CLASSV3 {
	switch {
	case cvssScore >= 0.1 && cvssScore <= 3.9:
		return vulnerabilityFinderTypes.LOW
	case cvssScore >= 4.0 && cvssScore <= 6.9:
		return vulnerabilityFinderTypes.MEDIUM
	case cvssScore >= 7.0 && cvssScore <= 8.9:
		return vulnerabilityFinderTypes.HIGH
	case cvssScore >= 9.0 && cvssScore <= 10.0:
		return vulnerabilityFinderTypes.CRITICAL
	default:
		return vulnerabilityFinderTypes.NONE
	}
}

func getSeverityClassV2(cvssScore float64) vulnerabilityFinderTypes.CVSS_CLASSV3 {
	switch {
	case cvssScore <= 3.9:
		return vulnerabilityFinderTypes.LOW
	case cvssScore <= 6.9:
		return vulnerabilityFinderTypes.MEDIUM
	case cvssScore <= 10.0:
		return vulnerabilityFinderTypes.HIGH
	default:
		return vulnerabilityFinderTypes.LOW
	}
}

// getNumericalCIAScore returns the numerical representation of a CIA value from either CVSS V2 or CVSS V3 values.
func getNumericalCIAScore(cia string) float32 {
	switch cia {
	case "COMPLETE", "HIGH":
		return 1.0
	case "PARTIAL", "LOW":
		return 0.5
	default:
		return 0.0
	}
}
