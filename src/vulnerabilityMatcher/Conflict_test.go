package matcher

import (
	"encoding/json"
	"os"
	"testing"

	"github.com/CodeClarityCE/plugin-sca-vuln-finder/src/conflictResolver"
	ecosystemTypes "github.com/CodeClarityCE/plugin-sca-vuln-finder/src/ecosystemAnalyzer/types"
	npmRepository "github.com/CodeClarityCE/plugin-sca-vuln-finder/src/repository/npm"
	vulnerabilityFinder "github.com/CodeClarityCE/plugin-sca-vuln-finder/src/types"
	"github.com/CodeClarityCE/plugin-sca-vuln-finder/src/types/conflict"
	knowledge "github.com/CodeClarityCE/utility-types/knowledge_db"

	"github.com/stretchr/testify/assert"
)

func TestClean(t *testing.T) {
	vm := VulnerabilityMatcher{
		Ecosystems:        []ecosystemTypes.Ecosystem{ecosystemTypes.NODEJS_OR_JS},
		ConflictResolver:  conflictResolver.TrustOSV,
		PackageRepository: npmRepository.NpmPackageRepository,
	}

	// Read the JSON file
	jsonData, _ := os.ReadFile("test_data/nvd.json")
	var nvdMatches []vulnerabilityFinder.NVDVulnerability
	json.Unmarshal(jsonData, &nvdMatches)

	jsonData, _ = os.ReadFile("test_data/osv.json")
	var osvMatches []vulnerabilityFinder.OSVVulnerability
	json.Unmarshal(jsonData, &osvMatches)

	result := vm.clean(nvdMatches, osvMatches)

	expectedPairs := map[string]map[string]vulnerabilityFinder.Pairs{
		"CVE-2021-1234": {
			"example@1.0.0": {
				NVD: vulnerabilityFinder.NVDVulnerability{
					Vulnerability: knowledge.NVDItem{
						NVDId: "CVE-2021-1234",
					},
					Dependency: vulnerabilityFinder.Dependency{
						Name: "example",
					},
				},
				Conflict: conflict.NONE,
			},
		},
		"OSV-2021-5678": {
			"example@2.0.0": {
				OSV: vulnerabilityFinder.OSVVulnerability{
					Vulnerability: knowledge.OSVItem{
						OSVId:   "OSV-2021-5678",
						Aliases: []string{"CVE-2021-5678"},
					},
					Dependency: vulnerabilityFinder.Dependency{
						Name: "example",
					},
				},
				Conflict: conflict.NONE,
			},
		},
	}

	assert.Equal(t, expectedPairs, result)
}
