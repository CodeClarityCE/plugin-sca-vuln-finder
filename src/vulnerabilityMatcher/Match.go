package matcher

import (
	"github.com/uptrace/bun"

	sbomTypes "github.com/CodeClarityCE/plugin-sbom-javascript/src/types/sbom/js"
	vulnerabilityFinder "github.com/CodeClarityCE/plugin-sca-vuln-finder/src/types"
	semverVersionTypes "github.com/CodeClarityCE/utility-node-semver/versions"
)

func (vm VulnerabilityMatcher) findVulnerabilities(dependencies map[string]map[string]sbomTypes.Versions, knowledge *bun.DB) map[string]map[string]vulnerabilityFinder.Pairs {

	NVDVulnerabilities := vm.GetNVDVulnerabilities(dependencies, knowledge)
	OSVVulnerabilities := vm.getOSVVulnerabilities(dependencies, knowledge)

	// jsonData, _ := json.MarshalIndent(NVDVulnerabilities, "", "  ")
	// os.WriteFile("nvd.json", jsonData, 0644)

	// jsonData, _ = json.MarshalIndent(OSVVulnerabilities, "", "  ")
	// os.WriteFile("osv.json", jsonData, 0644)

	return vm.clean(NVDVulnerabilities, OSVVulnerabilities)
}

func MatchExact(affectedInfo []vulnerabilityFinder.AffectedVersion, dependencyVersion semverVersionTypes.Semver) (bool, vulnerabilityFinder.VulnerableEvidenceExact) {

	for _, vulnVersionInfo := range affectedInfo {
		for _, exact := range vulnVersionInfo.Exact {

			if exact.VersionSemver.Compare(dependencyVersion, false) == 0 {
				return true, vulnerabilityFinder.VulnerableEvidenceExact{
					Vulnerable: exact,
					Installed:  dependencyVersion,
				}
			}
		}
	}

	return false, vulnerabilityFinder.VulnerableEvidenceExact{}

}

func MatchUniversal(affectedInfo []vulnerabilityFinder.AffectedVersion, dependencyVersion semverVersionTypes.Semver) (bool, vulnerabilityFinder.VulnerableEvidenceUniversal) {

	for _, vulnVersionInfo := range affectedInfo {
		test := vulnVersionInfo.Universal != vulnerabilityFinder.AffectedUniversal{}
		if test {
			return true, vulnerabilityFinder.VulnerableEvidenceUniversal{
				Vulnerable: vulnVersionInfo.Universal,
				Installed:  dependencyVersion,
			}
		}
	}

	return false, vulnerabilityFinder.VulnerableEvidenceUniversal{}

}

func MatchRange(affectedInfo []vulnerabilityFinder.AffectedVersion, dependencyVersion semverVersionTypes.Semver) (bool, vulnerabilityFinder.VulnerableEvidenceRange) {

	vulnerableEvidenceRange := vulnerabilityFinder.VulnerableEvidenceRange{}

	for _, vulnVersionInfo := range affectedInfo {

		for _, vulnRange := range vulnVersionInfo.Ranges {

			introduced_defined := vulnRange.IntroducedSemver != semverVersionTypes.Semver{}
			fixed_defined := vulnRange.FixedSemver != semverVersionTypes.Semver{}

			// Case 1: "introduced" and "fixed" defined
			//
			// A dependency is vulnerable if the introduction version is lower or equal to the dependency version
			// and if dependency version is lower than the fixed version
			// introduced <= dependency_version < fixed
			if introduced_defined && fixed_defined {
				lowerComp := vulnRange.IntroducedSemver.Compare(dependencyVersion, false)
				higherOrEqualToLower := (lowerComp == -1 || lowerComp == 0)

				higherComp := vulnRange.FixedSemver.Compare(dependencyVersion, false)
				lessThanUpper := (higherComp == 1)

				// introduced >= dependency_version < fixed
				if higherOrEqualToLower && lessThanUpper {
					vulnerableEvidenceRange.Vulnerable = vulnRange
					vulnerableEvidenceRange.Installed = dependencyVersion
					vulnerableEvidenceRange.OpenEnd = false
					return true, vulnerableEvidenceRange
				}
			}

			// Case 2: no "introduced" defined
			if !introduced_defined && fixed_defined {
				higherComp := vulnRange.FixedSemver.Compare(dependencyVersion, false)
				lessThanUpper := (higherComp == 1)

				// dependency_version < fixed
				if lessThanUpper {
					vulnerableEvidenceRange.Vulnerable = vulnRange
					vulnerableEvidenceRange.Installed = dependencyVersion
					vulnerableEvidenceRange.OpenEnd = false
					return true, vulnerableEvidenceRange
				}
			}

			// Case 3: no "fixed" defined
			//
			// This is the case when all dep versions starting at "introduced" are vulnerable
			if introduced_defined && !fixed_defined {
				lowerComp := vulnRange.IntroducedSemver.Compare(dependencyVersion, false)
				higherOrEqualToLower := (lowerComp == -1 || lowerComp == 0)

				// introduced <= dependency_version
				if higherOrEqualToLower {
					vulnerableEvidenceRange.Vulnerable = vulnRange
					vulnerableEvidenceRange.Installed = dependencyVersion
					vulnerableEvidenceRange.OpenEnd = true
					return true, vulnerableEvidenceRange
				}
			}

		}

	}
	return false, vulnerabilityFinder.VulnerableEvidenceRange{}
}
