package matcher

import (
	"database/sql"
	"encoding/json"
	"os"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/uptrace/bun"
	"github.com/uptrace/bun/dialect/pgdialect"
	"github.com/uptrace/bun/driver/pgdriver"

	vulnerabilityFinder "github.com/CodeClarityCE/plugin-sca-vuln-finder/src/types"
	dbhelper "github.com/CodeClarityCE/utility-dbhelper/helper"
)

func TestParsePairs(t *testing.T) {
	dsn_knowledge := "postgres://postgres:!ChangeMe!@127.0.0.1:5432/" + dbhelper.Config.Database.Knowledge + "?sslmode=disable"
	sqldb_knowledge := sql.OpenDB(pgdriver.NewConnector(pgdriver.WithDSN(dsn_knowledge)))
	db_knowledge := bun.NewDB(sqldb_knowledge, pgdialect.New())
	defer db_knowledge.Close()

	jsonData, _ := os.ReadFile("test_data/pairs.json")
	var pairs map[string]map[string]vulnerabilityFinder.Pairs
	json.Unmarshal(jsonData, &pairs)

	owaspTop10CWEListViewIds := []string{"1345", "1346", "1347", "1348", "1349", "1352", "1353", "1354", "1355", "1356"}

	vulnerabilities := parsePairs(pairs, db_knowledge, owaspTop10CWEListViewIds)

	// Assert the expected number of vulnerabilities
	assert.Len(t, vulnerabilities, 1)

	// Assert the properties of the first vulnerability
	assert.Equal(t, "vuln1", vulnerabilities[0].VulnerabilityId)
	assert.Equal(t, "dependency1", vulnerabilities[0].AffectedDependency)
	assert.Equal(t, "1.0.0", vulnerabilities[0].AffectedVersion)
	assert.Equal(t, "CWE-1234", vulnerabilities[0].Weaknesses[0].WeaknessId)
}
