package matcher

import (
	vulnerabilityFinder "github.com/CodeClarityCE/plugin-sca-vuln-finder/src/types"
	"github.com/CodeClarityCE/plugin-sca-vuln-finder/src/types/conflict"
)

func (vm VulnerabilityMatcher) clean(nvdMatches []vulnerabilityFinder.NVDVulnerability, osvMatches []vulnerabilityFinder.OSVVulnerability) map[string]map[string]vulnerabilityFinder.Pairs {
	pairs := make(map[string]map[string]vulnerabilityFinder.Pairs)

	for _, match := range nvdMatches {
		vulnID := match.Vulnerability.NVDId
		depKey := match.Dependency.Name + "@" + match.Dependency.Semver.String()

		vulnConflicts, ok := pairs[vulnID]
		// Check if vuln was already present
		if !ok {
			vulnConflicts = make(map[string]vulnerabilityFinder.Pairs)
			pairs[vulnID] = vulnConflicts
		}

		depConflict, ok := vulnConflicts[depKey]
		// Check if dep was already present for this vuln
		if !ok {
			depConflict = vulnerabilityFinder.Pairs{
				NVD:            match,
				ConflictWinner: conflict.NONE,
			}
		}

		depConflict.NVD = match
		vulnConflicts[depKey] = depConflict
	}

	for _, match := range osvMatches {
		vulnID := match.Vulnerability.OSVId
		for _, cveID := range match.Vulnerability.Aliases {
			_, ok := pairs[cveID]
			if !ok {
				vulnID = cveID
				break
			}
		}

		_, ok := pairs[match.Vulnerability.Cve]
		if ok {
			vulnID = match.Vulnerability.Cve
		}

		vulnConflicts, ok := pairs[vulnID]
		// Check if vuln was already present
		if !ok {
			vulnConflicts = make(map[string]vulnerabilityFinder.Pairs)
			pairs[vulnID] = vulnConflicts
		}

		depKey := match.Dependency.Name + "@" + match.Dependency.Semver.String()

		depConflict, ok := vulnConflicts[depKey]
		// Check if dep was already present for this vuln
		if !ok {
			depConflict = vulnerabilityFinder.Pairs{
				ConflictWinner: conflict.NONE,
			}
		}

		depConflict.OSV = match
		vulnConflicts[depKey] = depConflict
	}

	for _, vuln := range pairs {
		for dep_id, conflictData := range vuln {
			conflictData.ConflictWinner, conflictData.ConflictFlag = vm.ConflictResolver(conflictData)
			vuln[dep_id] = conflictData
		}
	}

	// jsonData, _ := json.MarshalIndent(pairs, "", "  ")
	// os.WriteFile("pairs.json", jsonData, 0644)

	return pairs
}
