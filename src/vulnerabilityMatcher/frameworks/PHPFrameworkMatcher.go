package frameworks

import (
	"fmt"
	"log"
	"strings"

	"github.com/uptrace/bun"
)

// PHPFrameworkVulnerabilityMatcher matches vulnerabilities specific to PHP frameworks
type PHPFrameworkVulnerabilityMatcher struct{}

// FrameworkVulnerabilityMatch represents a vulnerability match for a PHP framework
type FrameworkVulnerabilityMatch struct {
	VulnerabilityID string
	PackageName     string
	PackageVersion  string
	Source          string
	CVSS            float64
	Summary         string
	Details         string
	References      []string
	PublishedDate   string
	ModifiedDate    string
	WithdrawnDate   string
}

// MatchFrameworkVulnerabilities finds vulnerabilities for a specific PHP framework
func (matcher PHPFrameworkVulnerabilityMatcher) MatchFrameworkVulnerabilities(
	frameworkName string,
	frameworkVersion string,
	knowledge *bun.DB,
) ([]FrameworkVulnerabilityMatch, error) {

	matches := []FrameworkVulnerabilityMatch{}

	if knowledge == nil {
		return matches, fmt.Errorf("knowledge database is nil")
	}

	log.Printf("Searching for vulnerabilities in framework: %s %s", frameworkName, frameworkVersion)

	// Get framework-specific vulnerabilities from different sources
	osvMatches, err := matcher.getOSVFrameworkVulnerabilities(frameworkName, frameworkVersion, knowledge)
	if err != nil {
		log.Printf("Error fetching OSV vulnerabilities for %s: %v", frameworkName, err)
	} else {
		matches = append(matches, osvMatches...)
	}

	nvdMatches, err := matcher.getNVDFrameworkVulnerabilities(frameworkName, frameworkVersion, knowledge)
	if err != nil {
		log.Printf("Error fetching NVD vulnerabilities for %s: %v", frameworkName, err)
	} else {
		matches = append(matches, nvdMatches...)
	}

	// Add framework-specific security advisories
	advisoryMatches := matcher.getFrameworkSecurityAdvisories(frameworkName, frameworkVersion)
	matches = append(matches, advisoryMatches...)

	log.Printf("Found %d vulnerability matches for framework %s", len(matches), frameworkName)
	return matches, nil
}

// getOSVFrameworkVulnerabilities fetches vulnerabilities from OSV database
func (matcher PHPFrameworkVulnerabilityMatcher) getOSVFrameworkVulnerabilities(
	frameworkName string,
	frameworkVersion string,
	_ *bun.DB, // knowledge DB - unused in placeholder implementation
) ([]FrameworkVulnerabilityMatch, error) {

	matches := []FrameworkVulnerabilityMatch{}

	// Map framework names to their package names in OSV
	packageMap := map[string][]string{
		"Laravel":            {"laravel/framework"},
		"Symfony":            {"symfony/framework-bundle", "symfony/symfony"},
		"Symfony Components": {"symfony/http-kernel", "symfony/security-core", "symfony/routing"},
		"WordPress":          {"johnpbloch/wordpress", "wordpress"},
		"Drupal":             {"drupal/core", "drupal/drupal"},
		"CakePHP":            {"cakephp/cakephp"},
		"CodeIgniter":        {"codeigniter4/framework"},
		"Slim":               {"slim/slim"},
		"Yii2":               {"yiisoft/yii2"},
		"Lumen":              {"laravel/lumen-framework"},
		"Laminas":            {"laminas/laminas-mvc"},
		"Zend Framework":     {"zendframework/zend-mvc"},
	}

	packages, exists := packageMap[frameworkName]
	if !exists {
		log.Printf("No OSV package mapping found for framework: %s", frameworkName)
		return matches, nil
	}

	// For now, return placeholder vulnerabilities based on known framework issues
	// In production, this would query the actual OSV database
	for _, packageName := range packages {
		placeholderVulns := matcher.getPlaceholderOSVVulnerabilities(packageName, frameworkVersion)
		matches = append(matches, placeholderVulns...)
	}

	return matches, nil
}

// getNVDFrameworkVulnerabilities fetches vulnerabilities from NVD database
func (matcher PHPFrameworkVulnerabilityMatcher) getNVDFrameworkVulnerabilities(
	frameworkName string,
	frameworkVersion string,
	_ *bun.DB, // knowledge DB - unused in placeholder implementation
) ([]FrameworkVulnerabilityMatch, error) {

	matches := []FrameworkVulnerabilityMatch{}

	// NVD often uses different naming conventions
	nvdKeywords := map[string][]string{
		"Laravel":     {"laravel"},
		"Symfony":     {"symfony"},
		"WordPress":   {"wordpress"},
		"Drupal":      {"drupal"},
		"CakePHP":     {"cakephp"},
		"CodeIgniter": {"codeigniter"},
		"Slim":        {"slim_framework"},
		"Yii2":        {"yii"},
	}

	keywords, exists := nvdKeywords[frameworkName]
	if !exists {
		log.Printf("No NVD keywords found for framework: %s", frameworkName)
		return matches, nil
	}

	// For now, return placeholder vulnerabilities
	// In production, this would query the actual NVD database
	for _, keyword := range keywords {
		placeholderVulns := matcher.getPlaceholderNVDVulnerabilities(keyword, frameworkVersion)
		matches = append(matches, placeholderVulns...)
	}

	return matches, nil
}

// getFrameworkSecurityAdvisories returns known security advisories for frameworks
func (matcher PHPFrameworkVulnerabilityMatcher) getFrameworkSecurityAdvisories(
	frameworkName string,
	frameworkVersion string,
) []FrameworkVulnerabilityMatch {

	matches := []FrameworkVulnerabilityMatch{}

	switch frameworkName {
	case "Laravel":
		matches = append(matches, matcher.getLaravelAdvisories(frameworkVersion)...)
	case "Symfony":
		matches = append(matches, matcher.getSymfonyAdvisories(frameworkVersion)...)
	case "WordPress":
		matches = append(matches, matcher.getWordPressAdvisories(frameworkVersion)...)
	case "Drupal":
		matches = append(matches, matcher.getDrupalAdvisories(frameworkVersion)...)
	}

	return matches
}

// getLaravelAdvisories returns Laravel-specific security advisories
func (matcher PHPFrameworkVulnerabilityMatcher) getLaravelAdvisories(version string) []FrameworkVulnerabilityMatch {
	advisories := []FrameworkVulnerabilityMatch{}

	// Laravel 8.x mass assignment vulnerability
	if strings.HasPrefix(version, "8.") && version < "8.83.27" {
		advisories = append(advisories, FrameworkVulnerabilityMatch{
			VulnerabilityID: "LARAVEL-2022-001",
			PackageName:     "laravel/framework",
			PackageVersion:  version,
			Source:          "Laravel Security Advisory",
			CVSS:            7.5,
			Summary:         "Mass assignment vulnerability in Laravel 8.x",
			Details:         "Laravel 8.x versions before 8.83.27 are vulnerable to mass assignment attacks when using unguarded models.",
			References: []string{
				"https://github.com/laravel/framework/security/advisories",
				"https://laravel.com/docs/eloquent#mass-assignment",
			},
			PublishedDate: "2022-12-08",
		})
	}

	// Laravel 9.x SQL injection in query builder
	if strings.HasPrefix(version, "9.") && version < "9.52.5" {
		advisories = append(advisories, FrameworkVulnerabilityMatch{
			VulnerabilityID: "LARAVEL-2023-001",
			PackageName:     "laravel/framework",
			PackageVersion:  version,
			Source:          "Laravel Security Advisory",
			CVSS:            8.1,
			Summary:         "SQL injection vulnerability in Laravel 9.x query builder",
			Details:         "Laravel 9.x versions before 9.52.5 contain a SQL injection vulnerability in the query builder when using raw expressions.",
			References: []string{
				"https://github.com/laravel/framework/security/advisories",
				"https://laravel.com/docs/queries#raw-expressions",
			},
			PublishedDate: "2023-03-15",
		})
	}

	return advisories
}

// getSymfonyAdvisories returns Symfony-specific security advisories
func (matcher PHPFrameworkVulnerabilityMatcher) getSymfonyAdvisories(version string) []FrameworkVulnerabilityMatch {
	advisories := []FrameworkVulnerabilityMatch{}

	// Symfony HTTP kernel vulnerability
	if strings.HasPrefix(version, "5.") && version < "5.4.21" {
		advisories = append(advisories, FrameworkVulnerabilityMatch{
			VulnerabilityID: "SYMFONY-2023-001",
			PackageName:     "symfony/http-kernel",
			PackageVersion:  version,
			Source:          "Symfony Security Advisory",
			CVSS:            6.5,
			Summary:         "HTTP Host header injection in Symfony HttpKernel",
			Details:         "Symfony 5.x versions before 5.4.21 are vulnerable to HTTP Host header injection attacks.",
			References: []string{
				"https://symfony.com/cve-2023-1797",
				"https://symfony.com/doc/current/security.html",
			},
			PublishedDate: "2023-04-11",
		})
	}

	// Symfony Security Core vulnerability
	if strings.HasPrefix(version, "6.") && version < "6.2.7" {
		advisories = append(advisories, FrameworkVulnerabilityMatch{
			VulnerabilityID: "SYMFONY-2023-002",
			PackageName:     "symfony/security-core",
			PackageVersion:  version,
			Source:          "Symfony Security Advisory",
			CVSS:            7.3,
			Summary:         "Authentication bypass in Symfony Security component",
			Details:         "Symfony 6.x versions before 6.2.7 contain an authentication bypass vulnerability in the Security component.",
			References: []string{
				"https://symfony.com/cve-2023-2727",
				"https://symfony.com/doc/current/security.html",
			},
			PublishedDate: "2023-05-30",
		})
	}

	return advisories
}

// getWordPressAdvisories returns WordPress-specific security advisories
func (matcher PHPFrameworkVulnerabilityMatcher) getWordPressAdvisories(version string) []FrameworkVulnerabilityMatch {
	advisories := []FrameworkVulnerabilityMatch{}

	// WordPress always has ongoing security updates
	advisories = append(advisories, FrameworkVulnerabilityMatch{
		VulnerabilityID: "WORDPRESS-GENERAL-001",
		PackageName:     "wordpress",
		PackageVersion:  version,
		Source:          "WordPress Security Advisory",
		CVSS:            6.0,
		Summary:         "WordPress requires regular security updates",
		Details:         "WordPress should be kept up-to-date with the latest security patches. Check for available updates regularly.",
		References: []string{
			"https://wordpress.org/news/category/security/",
			"https://codex.wordpress.org/Hardening_WordPress",
		},
		PublishedDate: "2023-01-01",
	})

	return advisories
}

// getDrupalAdvisories returns Drupal-specific security advisories
func (matcher PHPFrameworkVulnerabilityMatcher) getDrupalAdvisories(version string) []FrameworkVulnerabilityMatch {
	advisories := []FrameworkVulnerabilityMatch{}

	// Drupal 8 EOL warning
	if strings.HasPrefix(version, "8.") {
		advisories = append(advisories, FrameworkVulnerabilityMatch{
			VulnerabilityID: "DRUPAL-EOL-001",
			PackageName:     "drupal/core",
			PackageVersion:  version,
			Source:          "Drupal Security Advisory",
			CVSS:            8.0,
			Summary:         "Drupal 8 end-of-life security risk",
			Details:         "Drupal 8 reached end-of-life and no longer receives security updates. Upgrade to Drupal 9 or 10 immediately.",
			References: []string{
				"https://www.drupal.org/psa-2021-06-29",
				"https://www.drupal.org/docs/upgrading-drupal",
			},
			PublishedDate: "2021-11-02",
		})
	}

	return advisories
}

// getPlaceholderOSVVulnerabilities returns placeholder OSV vulnerabilities for testing
func (matcher PHPFrameworkVulnerabilityMatcher) getPlaceholderOSVVulnerabilities(
	packageName string,
	version string,
) []FrameworkVulnerabilityMatch {

	// This is a placeholder implementation
	// In production, this would query the actual OSV database
	return []FrameworkVulnerabilityMatch{
		{
			VulnerabilityID: fmt.Sprintf("OSV-%s-PLACEHOLDER", strings.ToUpper(strings.ReplaceAll(packageName, "/", "-"))),
			PackageName:     packageName,
			PackageVersion:  version,
			Source:          "OSV Database",
			CVSS:            5.0,
			Summary:         fmt.Sprintf("Placeholder OSV vulnerability for %s", packageName),
			Details:         fmt.Sprintf("This is a placeholder vulnerability entry for %s. In production, real vulnerabilities would be fetched from OSV database.", packageName),
			References:      []string{"https://osv.dev/"},
			PublishedDate:   "2023-01-01",
		},
	}
}

// getPlaceholderNVDVulnerabilities returns placeholder NVD vulnerabilities for testing
func (matcher PHPFrameworkVulnerabilityMatcher) getPlaceholderNVDVulnerabilities(
	keyword string,
	version string,
) []FrameworkVulnerabilityMatch {

	// This is a placeholder implementation
	// In production, this would query the actual NVD database
	return []FrameworkVulnerabilityMatch{
		{
			VulnerabilityID: fmt.Sprintf("CVE-2023-%s", strings.ToUpper(keyword)),
			PackageName:     keyword,
			PackageVersion:  version,
			Source:          "NVD Database",
			CVSS:            6.5,
			Summary:         fmt.Sprintf("Placeholder NVD vulnerability for %s", keyword),
			Details:         fmt.Sprintf("This is a placeholder vulnerability entry for %s. In production, real vulnerabilities would be fetched from NVD database.", keyword),
			References:      []string{"https://nvd.nist.gov/"},
			PublishedDate:   "2023-01-01",
		},
	}
}
