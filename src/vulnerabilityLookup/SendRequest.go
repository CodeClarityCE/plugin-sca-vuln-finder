package vulnerabilitylookup

import (
	"bytes"
	"encoding/json"
	"log"
	"net/http"
	"os"
	"time"

	vulnerabilityFinder "github.com/CodeClarityCE/plugin-sca-vuln-finder/src/types"
)

func DeclareSighting(vulnerability vulnerabilityFinder.Vulnerability, projectURL string) {
	api_key := os.Getenv("VULNERABILITY_LOOKUP_API_KEY")

	// Example payload
	payload := map[string]interface{}{
		"creation_timestamp": time.Now().Format("2006-01-02T15:04:05.000Z"),
		"type":               "seen",
		"source":             "codeclarity.io - " + projectURL,
		"vulnerability":      vulnerability.VulnerabilityId,
	}

	jsonData, err := json.Marshal(payload)
	if err != nil {
		log.Printf("Error marshaling payload: %v", err)
		return
	}

	req, err := http.NewRequest("POST", "https://vulnerability.circl.lu/api/sighting", bytes.NewBuffer(jsonData))
	if err != nil {
		log.Printf("Error creating request: %v", err)
		return
	}

	req.Header.Set("X-API-KEY", api_key)
	req.Header.Set("Content-Type", "application/json")

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		log.Printf("Error sending request: %v", err)
		return
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusCreated {
		log.Printf("Request failed with status code: %d", resp.StatusCode)
	}
}
